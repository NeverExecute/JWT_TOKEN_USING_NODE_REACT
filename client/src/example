const express = require("express");
const jwt = require("jsonwebtoken");
const mysql = require("mysql");
const cors = require("cors");

const db = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "",
  database: "bank",
});

//check connection
db.connect((err) => {
  if (err) {
    console.log(err);
  } else {
    console.log("MySql Connected...");
  }
});

const app = express();
app.use(express.json());
app.use(cors());

//--------------------------------Create DB------------------------------------------------//
app.get("/createdb", (req, res) => {
  let sql = "CREATE DATABASE IF NOT EXISTS bank";
  db.query(sql, (err, result) => {
    if (err) throw err;
    console.log(result);
    res.send("Database Created...");
  });
});

//Create Tableuser_id
app.get("/createusertable", (req, res) => {
  let sql =
    "CREATE TABLE users(id int AUTO_INCREMENT, user_type VARCHAR(15), user_name VARCHAR(60), user_id VARCHAR(15), user_password VARCHAR(255), user_account_no int, PRIMARY KEY(id) )";
  db.query(sql, (err, result) => {
    if (err) throw err;
    console.log(result);
    res.send("User Table Created..");
  });
});
//--Create Account Table

app.get("/createaccounttable", (req, res) => {
  let sql =
    "CREATE TABLE accounts(id int AUTO_INCREMENT, user_id VARCHAR(15), user_account_no int, acc_withdraw_date VARCHAR(30), acc_withdraw_amt FLOAT, acc_deposite_date VARCHAR(30), acc_deposite_amt FLOAT ,PRIMARY KEY(id) )";
  db.query(sql, (err, result) => {
    if (err) throw err;
    console.log(result);
    res.send("Account Table Created..");
  });
});

//--------------------------------Create DB closed------------------------------------------------//

//------------------------------login/register using jws-------------------------------//

app.post("/register", (req, res) => {
  const username = req.body.username;
  const password = req.body.password;
  const type = req.body.type;
  console.log(username, password);

  db.query(
    "INSERT INTO users (user_id, user_password, user_type) VALUES (?,?,?)",
    [username, password, type],
    (err, result) => {
      console.log(err);
    },
  );
});

app.post("/login", (req, res) => {
  const username = req.body.username;
  const password = req.body.password;
  console.log(username, password);

  db.query(
    "SELECT * FROM users WHERE user_id = ? AND user_password = ? ",
    [username, password],
    (err, result) => {
      if (err) {
        res.send({ err: err });
      }

      if (result.length > 0) {
        res.send(result);
      } else {
        res.send({ message: "Wrong username/password!!!" });
      }
    },
  );
});

app.get("/api", (req, res) => {
  res.json({
    message: "Welcome to the API",
  });
});

app.post("/api/posts", verifyToken, (req, res) => {
  jwt.verify(req.token, "secretkey", (err, authData) => {
    if (err) {
      res.sendStatus(403);
    } else {
      res.json({
        message: "Post created...",
        authData,
      });
    }
  });
});

app.post("/api/login", (req, res) => {
  // Mock user
  const user = {
    id: 1,
    username: "brad",
    email: "brad@gmail.com",
  };

  jwt.sign({ user }, "secretkey", (err, token) => {
    res.json({
      token,
    });
  });
});

// FORMAT OF TOKEN
// Authorization: Bearer <access_token>

// Verify Token
function verifyToken(req, res, next) {
  // Get auth header value
  const bearerHeader = req.headers["authorization"];
  // Check if bearer is undefined
  if (typeof bearerHeader !== "undefined") {
    // Split at the space
    const bearer = bearerHeader.split(" ");
    // Get token from array
    const bearerToken = bearer[1];
    // Set the token
    req.token = bearerToken;
    // Next middleware
    next();
  } else {
    // Forbidden
    res.sendStatus(403);
  }
}

app.listen(5000, () => console.log("Server started on port 5000"));
